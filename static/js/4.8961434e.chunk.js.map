{"version":3,"sources":["component/piano/styles/piano.js","component/piano/index.js","helper/useActiveNoteHandler.js","helper/createKeyInfo.js","component/piano/FullPiano.js","helper/useMouseClicker.js","assets/audio/1.g3.ogg","assets/audio/3.a3.ogg","assets/audio/6.c4.ogg","assets/audio/9.ds4.ogg","assets/audio/12.fs4.ogg","assets/audio/15.a4.ogg","assets/audio/18.c5.ogg","assets/audio/21.ds5.ogg","assets/audio/24.fs5.ogg","assets/audio/27.a5.ogg","assets/audio/29.c6.ogg","assets/audio/30.ds6.ogg","assets/audio/31.fs6.ogg","helper/createSampler.js","assets/audio/32.a6.ogg","component/piano/FullscreenPiano.js"],"names":["Container","styled","div","isFullscreen","WhiteKey","path","BlackKey","Text","text","WhiteText","BlackText","Piano","children","restProps","Svg","width","version","viewBox","id","xmlns","preserveAspectRatio","useActiveNoteHandler","sampler","low","high","loading","useState","setNotes","noteRef","React","useRef","touchRef","translation","getTranslation","useEffect","handleKeyDown","e","code","preventDefault","keyNotePair","find","el","keycode","undefined","note","repeat","current","includes","triggerAttack","handleKeyUp","filter","k","triggerRelease","window","addEventListener","removeEventListener","touchNoteInfo","identifier","handleTouchStart","target","dataset","touchInfo","changedTouches","handleTouchEnd","length","changedTouch","getDataset","x","clientX","y","clientY","getPointTouch","document","elementFromPoint","handleTouchMove","prevNote","piano","getElementById","passive","map","t","keyOrder","createKeyInfo","numberOfWhiteKeys","split","lowNote","lowNumber","highNote","highNumber","lowNoteValue","indexOf","highNoteValue","noteValue","octaveValue","console","log","getNumberOfWhiteKeys","blackRightNeighbour","C","D","E","F","G","A","B","idx","whiteKeyInfo","i","hasNeighbour","push","FullPiano","options","showNotenames","showKeybindings","whiteKeys","key","d","createWhiteKeys","blackKeys","substr","createBlackKeys","activeKeys","allActive","clicked","setClicked","released","setReleased","handleMouseUp","handleMouseMove","handleMouseDown","useMouseClicker","data-note","className","slice","pair","g3b","Buffer","g3","a3b","a3","c4b","c4","ds4b","ds4","fs4b","fs4","a4b","a4","c5b","c5","ds5b","ds5","fs5b","fs5","a5b","a5","c6b","c6","ds6b","ds6","fs6b","fs6","FullscreenPiano","fn","setLoading","handle","useFullScreenHandle","Sampler","urls","baseUrl","release","onload","toDestination","active","onClick","enter"],"mappings":"qKAIMA,GAFQC,IAAOC,IAAV,kEAAGD,CAAH,MAEOA,IAAOC,IAAV,sEAAGD,CAAH,kLAGD,qBAAGE,aAAkC,OAAS,UAKtD,qBAAGA,cAAoC,qDAKnC,qBAAGA,cAAoC,kCAM3CC,EAAWH,IAAOI,KAAV,qEAAGJ,CAAH,yGAYRK,EAAWL,IAAOI,KAAV,qEAAGJ,CAAH,qHAYRM,EAAON,IAAOO,KAAV,iEAAGP,CAAH,iFAMJQ,EAAYR,YAAOM,GAAV,sEAAGN,CAAH,iBAGTS,EAAYT,YAAOM,GAAV,sEAAGN,CAAH,iB,OCpDTU,EAAQ,SAAC,GAAD,IAAER,EAAF,EAAEA,aAAcS,EAAhB,EAAgBA,SAAaC,EAA7B,kDACZ,cAACb,EAAD,yBAAWG,aAAcA,GAAmBU,GAA5C,aAAwDD,MAE1DD,EAAMG,IAAM,gBAAGC,EAAH,EAAGA,MAAOH,EAAV,EAAUA,SAAaC,EAAvB,2CACV,6CAAKG,QAAQ,MAAMC,QAAO,gBAAWF,EAAQ,EAAnB,QAA4BG,GAAG,YAAeL,GAAxE,IAAmFM,MAAM,6BAA6BC,oBAAoB,OAA1I,SACGR,MAGLD,EAAMP,SAAW,gBAAGQ,EAAH,EAAGA,SAAaC,EAAhB,mCACf,cAACT,EAAD,2BAAcS,GAAd,aAA0BD,MAE5BD,EAAML,SAAW,gBAAGM,EAAH,EAAGA,SAAaC,EAAhB,mCACf,cAACP,EAAD,2BAAcO,GAAd,aAA0BD,MAE5BD,EAAMF,UAAY,gBAAGG,EAAH,EAAGA,SAAaC,EAAhB,mCAChB,cAACJ,EAAD,2BAAeI,GAAf,aAA2BD,MAE7BD,EAAMD,UAAY,gBAAEE,EAAF,EAAEA,SAAaC,EAAf,mCAChB,cAACH,EAAD,2BAAeG,GAAf,aAA2BD,MAGdD,Q,wBC2FAU,EAhHc,SAACC,EAASC,EAAKC,EAAMC,GAAa,IAAD,EACvCC,mBAAS,IAArBC,EADmD,oBAEtDC,EAAUC,IAAMC,OAAO,IACvBC,EAAWF,IAAMC,OAAO,IACxBE,EAAcC,YAAeV,EAAKC,GA0GxC,OAzGAU,qBAAU,WACR,IAAMC,EAAgB,SAACC,GAEN,UAAXA,EAAEC,MACJD,EAAEE,iBAEJ,IAAMC,EAAcP,EAAYQ,MAAK,SAAAC,GAAE,OAAIA,EAAGC,UAAYN,EAAEC,QAC5D,QAAoBM,IAAhBJ,EAAJ,CACA,IAAMK,EAAOL,EAAYK,MACpBA,GAAQR,EAAES,QAAUjB,EAAQkB,QAAQC,SAASH,KAElDhB,EAAQkB,QAAR,sBAAsBlB,EAAQkB,SAA9B,CAAuCF,IACvCjB,EAASC,EAAQkB,SACjBxB,EAAQ0B,cAAcJ,MAElBK,EAAc,SAACb,GACnB,IAAMG,EAAcP,EAAYQ,MAAK,SAAAC,GAAE,OAAIA,EAAGC,UAAYN,EAAEC,QAC5D,QAAoBM,IAAhBJ,EAAJ,CACA,IAAMK,EAAOL,EAAYK,KACzBhB,EAAQkB,QAAUlB,EAAQkB,QAAQI,QAAO,SAAAC,GAAC,OAAIA,IAAMP,KACpDjB,EAASC,EAAQkB,SACjBxB,EAAQ8B,eAAeR,KAMzB,OAJKnB,IACH4B,OAAOC,iBAAiB,UAAWnB,GACnCkB,OAAOC,iBAAiB,QAASL,IAE5B,WACLI,OAAOE,oBAAoB,UAAWpB,GACtCkB,OAAOE,oBAAoB,QAASN,MAErC,CAAC3B,EAASU,EAAaP,IAC1BS,qBAAU,WACR,SAASsB,EAAT,EAAuCZ,GACrC,MAAO,CAAEA,OAAMa,WAD4B,EAApBA,YAQzB,IAAMC,EAAmB,SAACtB,GACxBA,EAAEE,iBAD4B,IAEtBM,EAASR,EAAEuB,OAAOC,QAAlBhB,KACFiB,EAAYL,EAAcpB,EAAE0B,eAAe,GAAIlB,GACrDb,EAASe,QAAT,sBAAuBf,EAASe,SAAhC,CAAyCe,IACzClC,EAASI,EAASe,SACN,MAARF,GACJtB,EAAQ0B,cAAcJ,IAGlBmB,EAAiB,SAAC3B,GAElBL,EAASe,QAAQkB,OAAS,GAC5B5B,EAAEE,iBAHwB,oBAKDF,EAAE0B,gBALD,yBAKjBG,EALiB,QAMpBL,EAAUM,EAAWD,GAC3B,QAAgBtB,IAAZiB,EAAuB,MAAM,CAAN,UAC3B,IAAMhB,EAAOY,EAAcS,EAAcL,EAAQhB,MACjDb,EAASe,QAAUf,EAASe,QAAQI,QAAO,SAAAC,GAAC,OAAIA,EAAEP,OAASA,EAAKA,QAChEjB,EAAQ,WAAR,cAAYI,EAASe,UACrBxB,EAAQ8B,eAAeR,EAAKA,OAN9B,2BAA6C,CAAC,IAAD,yCALjB,gCAgBxBsB,EAAa,SAACD,GAAkB,IAAD,IA/BrC,SAAuBA,GAGrB,MAAO,CAAEE,EAFCF,EAAaG,QAEXC,EADFJ,EAAaK,SA8BNC,CAAcN,GAAvBE,EAD2B,EAC3BA,EAAGE,EADwB,EACxBA,EAEX,OADa,UAAGG,SAASC,iBAAiBN,EAAGE,UAAhC,aAAG,EAAiCT,SAG7Cc,EAAkB,SAACtC,GAAO,IAAD,gBACFA,EAAE0B,gBADA,yBAClBG,EADkB,QAErBL,EAAUM,EAAWD,GAC3B,QAAgBtB,IAAZiB,EAAuB,MAAM,CAAN,UAC3B,IAAMhB,EAAOY,EAAcS,EAAcL,EAAQhB,MAC3C+B,EAAW5C,EAASe,QAAQN,MAAK,SAAAC,GAAE,OAAIA,EAAGgB,aAAeb,EAAKa,eAAe,CAAEb,UAAMD,EAAWc,WAAYb,EAAKa,YACnHb,EAAKA,OAAS+B,EAAS/B,OACzBb,EAASe,QAAUf,EAASe,QAAQI,QAAO,SAAAC,GAAC,OAAIA,EAAEP,OAAS+B,EAAS/B,QACpEb,EAASe,QAAT,sBAAuBf,EAASe,SAAhC,CAAyCF,IACxB,MAAbA,EAAKA,MACPtB,EAAQ0B,cAAcJ,EAAKA,MAER,MAAjB+B,EAAS/B,MACXtB,EAAQ8B,eAAeuB,EAAS/B,MAElCjB,EAASI,EAASe,WAdtB,2BAA6C,CAAC,IAAD,yCADhB,gCAoBzB8B,EAAQJ,SAASK,eAAe,YAOtC,OALKpD,IACHmD,EAAMtB,iBAAiB,aAAcI,EAAkB,CAAEoB,SAAS,IAClEN,SAASlB,iBAAiB,WAAYS,GACtCS,SAASlB,iBAAiB,YAAaoB,EAAiB,CAAEI,SAAS,KAE9D,WACLF,EAAMrB,oBAAoB,aAAcG,EAAkB,CAAEoB,SAAS,IACrEN,SAASjB,oBAAoB,WAAYQ,GACzCS,SAASjB,oBAAoB,YAAamB,EAAiB,CAAEI,SAAS,OAEvE,CAACxD,EAASG,IACP,GAAN,mBAAWM,EAASe,QAAQiC,KAAI,SAAAC,GAAC,OAAIA,EAAEpC,SAAvC,YAAiDhB,EAAQkB,WClH3D,IAAMmC,EAAW,CAChB,IACA,IACA,IACA,IACA,IACA,IACA,KAMc,SAASC,EAAc3D,EAAKC,GAgB1C,IAfA,IAAM2D,EA2BP,SAA8B5D,EAAKC,GAAO,IAAD,EACXD,EAAI6D,MAAM,IADC,mBACjCC,EADiC,KACxBC,EADwB,OAET9D,EAAK4D,MAAM,IAFF,mBAEjCG,EAFiC,KAEvBC,EAFuB,KAGlCC,EAAeR,EAASS,QAAQL,GAChCM,EAAgBV,EAASS,QAAQH,GAIjCK,EAAY,EAAID,EAAgBF,EAChCI,EAAcL,EAAaF,EAEjC,OADAQ,QAAQC,IAAI,CAACN,eAAcE,gBAAeC,YAAWC,gBAChC,EAAdA,EAAkBD,EAtCCI,CAAqBzE,EAAKC,GAC9CyE,EAAsB,CAC3BC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,GAT4C,EAYrBjF,EAAI6D,MAAM,IAZW,mBAY3CC,EAZ2C,KAYlCC,EAZkC,KAa5CmB,EAAMxB,EAASS,QAAQL,GACvBqB,EAAe,GAEVC,EAAI,EAAGA,EAAIxB,EAAmBwB,IAAK,CAC/B,IAARF,GAAaE,EAAI,GACpBrB,IAGD,IAAMsB,EAAeD,IAAMxB,EAAoB,GAAYc,EAAoBhB,EAASwB,IACxFC,EAAaG,KAAK,CAAEjE,KAAOqC,EAASwB,GAAOnB,EAAYsB,iBACvDH,EAAMA,EAAM,EAAI,EAAIA,EAAM,EAE3B,OAAOC,ECiFOI,MAhHG,SAAC,GAA8G,IAAD,IAA3GC,QAAWxF,EAAgG,EAAhGA,IAAKC,EAA2F,EAA3FA,KAAMwF,EAAqF,EAArFA,cAAeC,EAAsE,EAAtEA,gBAAiB9G,EAAqD,EAArDA,aAAcsB,EAAuC,EAAvCA,QAAWH,EAA4B,EAA5BA,QAAYT,EAAgB,qCACzHqG,EAmFP,SAAyB3F,EAAKC,GAE7B,IAAMkF,EAAexB,EAAc3D,EAAKC,GACxC,OAAOkF,EAAa3B,KAAI,SAACoC,EAAKR,GAC7B,IAAMxC,EAAQ,GAAJwC,EACV,OAAU,IAANA,EACI,CAAEC,aAAcO,EAAIP,aAAchE,KAAMuE,EAAIvE,KAAMwE,EAAE,4CAA8CjD,KAC/FwC,IAAMD,EAAa1C,OAAS,EAC/B,CAAE4C,aAAcO,EAAIP,aAAchE,KAAMuE,EAAIvE,KAAMwE,EAAE,KAAD,OAAOjD,EAAP,4CAAoDA,KAEvG,CAAEyC,aAAcO,EAAIP,aAAchE,KAAMuE,EAAIvE,KAAMwE,EAAE,KAAD,OAAOjD,EAAP,0BAAkCA,QA7F5EkD,CAAgB9F,EAAKC,GACjC8F,EAgGP,SAAyBJ,EAAW3F,EAAKC,GACxC,OAAO0F,EAAUnC,KAAI,SAACoC,EAAKR,GAE1B,IAAM/D,EAAOuE,EAAIvE,KAAK2E,OAAO,EAAG,GAAK,IAAMJ,EAAIvE,KAAK2E,OAAO,GACrDpD,EAAI,GAAK,GAAKwC,EACpB,OAAIQ,EAAIP,aACA,CAAEhE,OAAMwE,EAAE,KAAD,OAAOjD,EAAP,yDAAiEA,KAI1E,QAENjB,QAAO,SAAAT,GAAE,OAAW,OAAPA,KA5GE+E,CAAgBN,GAC5BlF,EAAcC,YAAeV,EAAKC,GAElCiG,EAAapG,EAAqBC,EAASC,EAAKC,EAAMC,GAItDiG,EAAS,CCfD,SAAyBpG,EAASG,GAAU,IAAD,EACxBC,mBAAS,MADe,mBAC/CiG,EAD+C,KACtCC,EADsC,OAEtBlG,mBAAS,MAFa,mBAE/CmG,EAF+C,KAErCC,EAFqC,KAgDtD,OA7CA5F,qBAAU,WACN,IAAM6F,EAAgB,SAAC3F,GAAO,IAClBQ,EAASR,EAAEuB,OAAOC,QAAlBhB,KACRkF,EAAYlF,GACZgF,EAAW,OAGTI,EAAkB,SAAC5F,GACrB,GAAgB,OAAZuF,QAAyChF,IAArBP,EAAEuB,OAAOC,QAAuB,CAAC,IAC7ChB,EAASR,EAAEuB,OAAOC,QAAlBhB,KACF+B,EAAWgD,EACb/E,IAAS+B,IACTiD,EAAWhF,GACXkF,EAAYnD,MAIlBsD,EAAkB,SAAC7F,GAAO,IACpBQ,EAASR,EAAEuB,OAAOC,QAAlBhB,KACRgF,EAAWhF,GACXkF,EAAY,OAShB,OALKrG,IACD4B,OAAOC,iBAAiB,YAAa2E,GACrC5E,OAAOC,iBAAiB,YAAa0E,GACrC3E,OAAOC,iBAAiB,UAAWyE,IAEhC,WACH1E,OAAOE,oBAAoB,YAAa0E,GACxC5E,OAAOE,oBAAoB,YAAayE,GACxC3E,OAAOE,oBAAoB,UAAWwE,MAE3C,CAACzG,EAASqG,EAASlG,IAGtBS,qBAAU,WACS,MAAXyF,GACJrG,EAAQ0B,cAAc2E,KACvB,CAACrG,EAASqG,IACbzF,qBAAU,WACU,MAAZ2F,GACJvG,EAAQ8B,eAAeyE,KACxB,CAACvG,EAASuG,IACNF,EDnCMO,CAAgB5G,EAASG,IAE1B,mBAAgBgG,IAE/B,OACC,cAAC,EAAD,yBAAOtH,aAAcA,GAAkBU,GAAvC,aACC,eAAC,EAAMC,IAAP,CAAWC,MAA0B,GAAnBmG,EAAUlD,OAA5B,UACEkD,EAAUnC,KAAI,SAACoC,GAAD,OACd,cAAC,EAAM/G,SAAP,CACC+H,YAAWhB,EAAIvE,KACfwE,EAAGD,EAAIC,EAEPgB,UAAWV,EAAU3E,SAASoE,EAAIvE,MAAQ,SAAW,MADhDuE,EAAIvE,SAKV0E,EAAUvC,KAAI,SAACoC,GAAD,OACd,cAAC,EAAM7G,SAAP,CACC6H,YAAWhB,EAAIvE,KACfwE,EAAGD,EAAIC,EAEPgB,UAAWV,EAAU3E,SAASoE,EAAIvE,MAAQ,SAAW,MADhDuE,EAAIvE,SAKVoE,GACA,8BACEE,EAAUnC,KAAI,SAACoC,GAAD,OAEd,aADA,CACC,EAAM1G,UAAP,CACC0D,EAAGgD,EAAIhD,EAAI,GACXE,EAAE,MAFH,SAKE8C,EAAIvE,KAAKyF,MAAM,GAAI,IAFflB,EAAIvE,SAKV0E,EAAUvC,KAAI,SAACoC,GAAD,OAEd,aADA,CACC,EAAMzG,UAAP,CACCyD,EAAGgD,EAAIhD,EAAI,EACXE,EAAE,KAFH,SAKE8C,EAAIvE,KAAKyF,MAAM,GAAI,IAFflB,EAAIvE,YAQZqE,GACA,8BACEC,EAAUnC,KAAI,SAACoC,GACf,IAAMmB,EAAOtG,EAAYQ,MAAK,SAACC,GAAD,OAAQ0E,EAAIvE,OAASH,EAAGG,QACtD,OAAO,cAAC,EAAMnC,UAAP,CACN0D,EAAGgD,EAAIhD,EAAI,GACXE,EAAE,KAFI,SAKLiE,EAAKnB,KAFDA,EAAIvE,SAKV0E,EAAUvC,KAAI,SAACoC,GACf,IAAMmB,EAAOtG,EAAYQ,MAAK,SAACC,GAAD,OAAQ0E,EAAIvE,OAASH,EAAGG,QACtD,OAAO,cAAC,EAAMlC,UAAP,CACNyD,EAAGgD,EAAIhD,EAAI,EACXE,EAAE,KAFI,SAKLiE,EAAKnB,KAFDA,EAAIvE,mB,QEjFF,MAA0B,iCCA1B,MAA0B,iCCA1B,MAA0B,iCCA1B,MAA0B,kCCA1B,MAA0B,mCCA1B,MAA0B,kCCA1B,MAA0B,kCCA1B,MAA0B,mCCA1B,MAA0B,mCCA1B,MAA0B,kCCA1B,MAA0B,kCCA1B,MAA0B,mCCA1B,MAA0B,mCCGnC2F,GCHS,IDGH,IAAIC,IAAOC,IACjBC,EAAM,IAAIF,IAAOG,GACjBC,EAAM,IAAIJ,IAAOK,GACjBC,EAAO,IAAIN,IAAOO,GAClBC,EAAO,IAAIR,IAAOS,GAClBC,EAAM,IAAIV,IAAOW,GACjBC,EAAM,IAAIZ,IAAOa,GACjBC,EAAO,IAAId,IAAOe,GAElBC,EAAO,IAAIhB,IAAOiB,GAClBC,EAAM,IAAIlB,IAAOmB,GACjBC,EAAM,IAAIpB,IAAOqB,GACjBC,EAAO,IAAItB,IAAOuB,GAClBC,EAAO,IAAIxB,IAAOyB,G,YEUTC,UApBS,SAAC,GAA2C,IFa9BC,EEbXpD,EAAwC,EAAxCA,QAASqD,EAA+B,EAA/BA,WAAevJ,EAAgB,wCAC3DwJ,EAASC,cACThJ,GFW8B6I,EEXN,kBAAMC,GAAW,IFYtC,IAAIG,IAAQ,CACfC,KAAM,CACF,GAAMjC,EACN,GAAMG,EACN,GAAME,EACN,MAAOE,EACP,MAAOE,EACP,GAAME,EACN,GAAME,EACN,MAAOE,EACP,MAAOE,EACP,GAAME,EACN,GAAME,EACN,MAAOE,EACP,MAAOE,GAEXS,QAAS,qBACTC,QAAS,EACTC,OAAQ,WACJR,OAELS,iBE3BL,OACE,gDAAS/J,GAAT,cACE,cAAC,IAAD,CAAYwJ,OAAQA,EAApB,SACE,cAAC,EAAD,CAAW/I,QAASA,EAASyF,QAAO,2BAAOA,GAAP,IAAgB5G,aAAckK,EAAOQ,aAE3E,cAAC,IAAD,CAAQC,QATQ,WAClBT,EAAOU,SAQL","file":"static/js/4.8961434e.chunk.js","sourcesContent":["import styled from \"styled-components/macro\";\r\n\r\nconst Frame = styled.div`\r\n`;\r\nconst Container = styled.div`\r\n    // This is tricky. I want full screen when in fullscreen mode. I want responsivness otherwise. It also needs to have a max height when not in fullscreen mode.\r\n    margin: auto;\r\n    resize: ${({ isFullscreen }) => isFullscreen ? 'none' : 'both'};\r\n    overflow: hidden;\r\n    width:80%; \r\n    height:100%;\r\n    // If fullscreen then I want to have max width and height with important to override eventual resizing of the div by resize handle. Resize css property gets inlined and needs to be overridden somehow. It was either like this or removing it through Javascript. \r\n    ${({ isFullscreen }) => (isFullscreen && 'width:100% !important; height: 100% !important;')}\r\n    svg{\r\n        width: 100%;\r\n        height: 100%;\r\n        max-height: min(50vw, 600px); \r\n        ${({ isFullscreen }) => (isFullscreen && 'max-height:100% !important;')}\r\n    }\r\n    @media screen and (max-width: 1200px) {\r\n        width: 100%;\r\n    }\r\n`;\r\nconst WhiteKey = styled.path`\r\n    fill: white;\r\n    stroke: black;\r\n    stroke-width: 0.25;\r\n    &.active{\r\n        fill: #999;\r\n    }\r\n\r\n    &:not(.active){\r\n        transition: fill 0.2s;\r\n    }\r\n`;\r\nconst BlackKey = styled.path`\r\n    fill: black;\r\n    stroke: black;\r\n    stroke-width: 0.25;\r\n    &.active{\r\n        fill: #333;\r\n        stroke: #333;\r\n    }\r\n    &:not(.active){\r\n        transition: fill 0.2s;\r\n    }\r\n`;\r\nconst Text = styled.text`\r\n    font-family: monospace;\r\n    font-size: 0.9em;\r\n    user-select: none;\r\n    pointer-events: none; \r\n`\r\nconst WhiteText = styled(Text)`\r\n    fill:black;\r\n`;\r\nconst BlackText = styled(Text)`\r\n    fill:white;\r\n`;\r\nexport { Frame, Container, WhiteKey, WhiteText, BlackKey, BlackText }","import React from 'react'\r\nimport { Container, WhiteKey, BlackKey, WhiteText, BlackText } from './styles/piano'\r\n\r\n\r\nconst Piano = ({isFullscreen, children, ...restProps }) => (\r\n  <Container isFullscreen={isFullscreen}  {...restProps}>{children}</Container>\r\n)\r\nPiano.Svg = ({ width, children, ...restProps }) => (\r\n  <svg version=\"1.1\" viewBox={`-1 -1 ${width + 2} 112`} id=\"pianoSvg\" {...restProps} xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"none\">\r\n    {children}\r\n  </svg>\r\n)\r\nPiano.WhiteKey = ({ children, ...restProps }) => (\r\n  <WhiteKey {...restProps}>{children}</WhiteKey>\r\n)\r\nPiano.BlackKey = ({ children, ...restProps }) => (\r\n  <BlackKey {...restProps}>{children}</BlackKey>\r\n)\r\nPiano.WhiteText = ({ children, ...restProps }) => (\r\n  <WhiteText {...restProps}>{children}</WhiteText>\r\n)\r\nPiano.BlackText = ({children, ...restProps }) => (\r\n  <BlackText {...restProps}>{children}</BlackText>\r\n)\r\n\r\nexport default Piano","import React, { useEffect, useState } from 'react';\r\nimport getTranslation  from './getTranslation'\r\n\r\n// This returns the pressed notes so the class active can get added to pressed keys. It also plays the notes.\r\nconst useActiveNoteHandler = (sampler, low, high, loading) => {\r\n  const [, setNotes] = useState([])\r\n  const noteRef = React.useRef([])\r\n  const touchRef = React.useRef([])\r\n  const translation = getTranslation(low, high)\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      // This is to disable the quickfind on firefox\r\n      if (e.code === 'Slash') {\r\n        e.preventDefault();\r\n      }\r\n      const keyNotePair = translation.find(el => el.keycode === e.code)\r\n      if (keyNotePair === undefined) return\r\n      const note = keyNotePair.note;\r\n      if (!note || e.repeat || noteRef.current.includes(note)) return;\r\n      // I have to do it like this. If I use usestate here instead of ref it will remove and add the eventlisteners every time i click. This means if I release two keys at the same time the eventlistener for one of them might get removed by releasing the other key, and the website wont register the release of the key. I only use setNotes to trigger a rerender, it doesn't actually get used for anything else. \r\n      noteRef.current = [...noteRef.current, note]\r\n      setNotes(noteRef.current)\r\n      sampler.triggerAttack(note)\r\n    }\r\n    const handleKeyUp = (e) => {\r\n      const keyNotePair = translation.find(el => el.keycode === e.code)\r\n      if (keyNotePair === undefined) return\r\n      const note = keyNotePair.note;\r\n      noteRef.current = noteRef.current.filter(k => k !== note)\r\n      setNotes(noteRef.current)\r\n      sampler.triggerRelease(note)\r\n    }\r\n    if (!loading) {\r\n      window.addEventListener('keydown', handleKeyDown);\r\n      window.addEventListener('keyup', handleKeyUp);\r\n    }\r\n    return () => {\r\n      window.removeEventListener('keydown', handleKeyDown);\r\n      window.removeEventListener('keyup', handleKeyUp);\r\n    };\r\n  }, [sampler, translation, loading])\r\n  useEffect(() => {\r\n    function touchNoteInfo({ identifier }, note) {\r\n      return { note, identifier }\r\n    }\r\n    function getPointTouch(changedTouch) {\r\n      const x = changedTouch.clientX\r\n      const y = changedTouch.clientY\r\n      return { x, y }\r\n    }\r\n    const handleTouchStart = (e) => {\r\n      e.preventDefault()\r\n      const { note } = e.target.dataset\r\n      const touchInfo = touchNoteInfo(e.changedTouches[0], note)\r\n      touchRef.current = [...touchRef.current, touchInfo]\r\n      setNotes(touchRef.current);\r\n      if (note == null) return\r\n      sampler.triggerAttack(note)\r\n    }\r\n\r\n    const handleTouchEnd = (e) => {\r\n      // Prevent default stops the clicking of buttons, like keybinding and enter fullscreen. If noteRef is larger than 0 I am currently clicking piano buttons, and then I want to stop default.\r\n      if (touchRef.current.length > 0) {\r\n        e.preventDefault()\r\n      }\r\n      for (const changedTouch of e.changedTouches) {\r\n        const dataset = getDataset(changedTouch)\r\n        if (dataset === undefined) return;\r\n        const note = touchNoteInfo(changedTouch, dataset.note)\r\n        touchRef.current = touchRef.current.filter(k => k.note !== note.note)\r\n        setNotes(...touchRef.current)\r\n        sampler.triggerRelease(note.note)\r\n\r\n      }\r\n    }\r\n    // Handlemove in a similar vein to this https://developer.mozilla.org/en-US/docs/Web/API/Touch_events under handleMove\r\n    const getDataset = (changedTouch) => {\r\n      const { x, y } = getPointTouch(changedTouch)\r\n      const dataset = document.elementFromPoint(x, y)?.dataset\r\n      return dataset\r\n    }\r\n    const handleTouchMove = (e) => {\r\n      for (const changedTouch of e.changedTouches) {\r\n        const dataset = getDataset(changedTouch)\r\n        if (dataset === undefined) return;\r\n        const note = touchNoteInfo(changedTouch, dataset.note)\r\n        const prevNote = touchRef.current.find(el => el.identifier === note.identifier) || { note: undefined, identifier: note.identifier };\r\n        if (note.note !== prevNote.note) {\r\n          touchRef.current = touchRef.current.filter(k => k.note !== prevNote.note)\r\n          touchRef.current = [...touchRef.current, note]\r\n          if (note.note != null) {\r\n            sampler.triggerAttack(note.note)\r\n          }\r\n          if (prevNote.note != null) {\r\n            sampler.triggerRelease(prevNote.note)\r\n          }\r\n          setNotes(touchRef.current)\r\n        }\r\n      }\r\n    }\r\n\r\n    const piano = document.getElementById('pianoSvg');\r\n    // I need to add eventlistener here, instead of inline in element, because I need to set it to passive, so I can prevent default.\r\n    if (!loading) {\r\n      piano.addEventListener('touchstart', handleTouchStart, { passive: false });\r\n      document.addEventListener('touchend', handleTouchEnd);\r\n      document.addEventListener('touchmove', handleTouchMove, { passive: false });\r\n    }\r\n    return () => {\r\n      piano.removeEventListener('touchstart', handleTouchStart, { passive: false });\r\n      document.removeEventListener('touchend', handleTouchEnd);\r\n      document.removeEventListener('touchmove', handleTouchMove, { passive: false });\r\n    }\r\n  }, [sampler, loading])\r\n  return [...touchRef.current.map(t => t.note), ...noteRef.current]\r\n}\r\nexport default useActiveNoteHandler;","const keyOrder = [\r\n\t'C',\r\n\t'D',\r\n\t'E',\r\n\t'F',\r\n\t'G',\r\n\t'A',\r\n\t'B',\r\n]\r\n// Returns an array of objects with this structure [{ \"note\": \"D2\", \"hasNeighbour\": true } ,{ \"note\": \"E2\", \"hasNeighbour\": false } ]\r\n// E and B never has neighbours. The right most white key never has a neighbour, no matter what note.\r\n// Low and high are key names like this: G2. G is note name, 2 is octave name.\r\n\r\nexport default function createKeyInfo(low, high) {\r\n\tconst numberOfWhiteKeys = getNumberOfWhiteKeys(low, high)\r\n\tconst blackRightNeighbour = {\r\n\t\tC: true,\r\n\t\tD: true,\r\n\t\tE: false,\r\n\t\tF: true,\r\n\t\tG: true,\r\n\t\tA: true,\r\n\t\tB: false,\r\n\t}\r\n\r\n\tlet [lowNote, lowNumber] = low.split(\"\")\r\n\tlet idx = keyOrder.indexOf(lowNote);\r\n\tlet whiteKeyInfo = []\r\n\t// Do once for every white key. Creates an array with the structure described above. \r\n\tfor (let i = 0; i < numberOfWhiteKeys; i++) {\r\n\t\tif (idx === 0 && i > 0) {\r\n\t\t\tlowNumber++\r\n\t\t}\r\n\t\t// The right most key on the visible keyboard never has a black neighbouring key\r\n\t\tconst hasNeighbour = i === numberOfWhiteKeys - 1 ? false : blackRightNeighbour[keyOrder[idx]]\r\n\t\twhiteKeyInfo.push({ note: (keyOrder[idx] + lowNumber), hasNeighbour })\r\n\t\tidx = idx > 5 ? 0 : idx + 1\r\n\t}\r\n\treturn whiteKeyInfo;\r\n}\r\n\r\nfunction getNumberOfWhiteKeys(low, high) {\r\n\tconst [lowNote, lowNumber] = low.split(\"\")\r\n\tconst [highNote, highNumber] = high.split(\"\")\r\n\tconst lowNoteValue = keyOrder.indexOf(lowNote)\r\n\tconst highNoteValue = keyOrder.indexOf(highNote)\r\n\t// From C to E lowNoteVal is 0 high is 2. There are however three keys, that is why + 1.\r\n\t// From A2 to C3 the lowNoteVal is 5 highNoteVal is 0 => -4. octaveValue is 1.\r\n\t// Return value will be octVal * 7 - 4, because seven keys cover the octave => 3\r\n\tconst noteValue = 1 + highNoteValue - lowNoteValue \r\n\tconst octaveValue = highNumber - lowNumber;\r\n\tconsole.log({lowNoteValue, highNoteValue, noteValue, octaveValue})\r\n\treturn octaveValue * 7 + noteValue;\r\n}","import React from 'react'\r\nimport Piano from '.'\r\nimport useActiveNoteHandler from '../../helper/useActiveNoteHandler';\r\nimport useMouseClicker from '../../helper/useMouseClicker';\r\nimport createKeyInfo from '../../helper/createKeyInfo';\r\nimport getTranslation from '../../helper/getTranslation';\r\n\r\nconst FullPiano = ({ options: { low, high, showNotenames, showKeybindings, isFullscreen, loading }, sampler, ...restProps }) => {\r\n\tconst whiteKeys = createWhiteKeys(low, high);\r\n\tconst blackKeys = createBlackKeys(whiteKeys, low, high);\r\n\tconst translation = getTranslation(low, high)\r\n\t// Gives all touched or keyboard pressed keys.\r\n\tconst activeKeys = useActiveNoteHandler(sampler, low, high, loading)\r\n\t// Name of all mouse clicked notes.\r\n\tconst clicked = useMouseClicker(sampler, loading);\r\n\t// This array contains the names of all clicked, touched and keyboard pressed notes.\r\n\tconst allActive = [clicked, ...activeKeys]\r\n\r\n\treturn (\r\n\t\t<Piano isFullscreen={isFullscreen} {...restProps}>\r\n\t\t\t<Piano.Svg width={whiteKeys.length * 30}>\r\n\t\t\t\t{whiteKeys.map((key) => (\r\n\t\t\t\t\t<Piano.WhiteKey\r\n\t\t\t\t\t\tdata-note={key.note}\r\n\t\t\t\t\t\td={key.d}\r\n\t\t\t\t\t\tkey={key.note}\r\n\t\t\t\t\t\tclassName={allActive.includes(key.note) ? 'active' : null}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\r\n\t\t\t\t{blackKeys.map((key) => (\r\n\t\t\t\t\t<Piano.BlackKey\r\n\t\t\t\t\t\tdata-note={key.note}\r\n\t\t\t\t\t\td={key.d}\r\n\t\t\t\t\t\tkey={key.note}\r\n\t\t\t\t\t\tclassName={allActive.includes(key.note) ? 'active' : null}\r\n\t\t\t\t\t/>\r\n\t\t\t\t))}\r\n\t\t\t\t{/* This shows the names of the note */}\r\n\t\t\t\t{showNotenames &&\r\n\t\t\t\t\t<g>\r\n\t\t\t\t\t\t{whiteKeys.map((key) => (\r\n\t\t\t\t\t\t\t// showKeyNames &&\r\n\t\t\t\t\t\t\t<Piano.WhiteText\r\n\t\t\t\t\t\t\t\tx={key.x + 12}\r\n\t\t\t\t\t\t\t\ty=\"105\"\r\n\t\t\t\t\t\t\t\tkey={key.note}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{key.note.slice(0, -1)}\r\n\t\t\t\t\t\t\t</Piano.WhiteText>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t{blackKeys.map((key) => (\r\n\t\t\t\t\t\t\t// showKeyNames &&\r\n\t\t\t\t\t\t\t<Piano.BlackText\r\n\t\t\t\t\t\t\t\tx={key.x + 3}\r\n\t\t\t\t\t\t\t\ty=\"60\"\r\n\t\t\t\t\t\t\t\tkey={key.note}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{key.note.slice(0, -1)}\r\n\t\t\t\t\t\t\t</Piano.BlackText>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</g>\r\n\t\t\t\t}\r\n\t\t\t\t{/* This shows the names of the keybinding */}\r\n\t\t\t\t{showKeybindings &&\r\n\t\t\t\t\t<g>\r\n\t\t\t\t\t\t{whiteKeys.map((key) => {\r\n\t\t\t\t\t\t\tconst pair = translation.find((el) => key.note === el.note)\r\n\t\t\t\t\t\t\treturn <Piano.WhiteText\r\n\t\t\t\t\t\t\t\tx={key.x + 12}\r\n\t\t\t\t\t\t\t\ty=\"90\"\r\n\t\t\t\t\t\t\t\tkey={key.note}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{pair.key}\r\n\t\t\t\t\t\t\t</Piano.WhiteText>\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t{blackKeys.map((key) => {\r\n\t\t\t\t\t\t\tconst pair = translation.find((el) => key.note === el.note)\r\n\t\t\t\t\t\t\treturn <Piano.BlackText\r\n\t\t\t\t\t\t\t\tx={key.x + 7}\r\n\t\t\t\t\t\t\t\ty=\"45\"\r\n\t\t\t\t\t\t\t\tkey={key.note}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t{pair.key}\r\n\t\t\t\t\t\t\t</Piano.BlackText>\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</g>}\r\n\t\t\t</Piano.Svg>\r\n\t\t</Piano>\r\n\t)\r\n}\r\nfunction createWhiteKeys(low, high) {\r\n\t// Get some basic info from createKeyInfo here, with a bit complicated functions, and then pretty up the data here.\r\n\tconst whiteKeyInfo = createKeyInfo(low, high)\r\n\treturn whiteKeyInfo.map((key, i) => {\r\n\t\tconst x = i * 30\r\n\t\tif (i === 0) {\r\n\t\t\treturn { hasNeighbour: key.hasNeighbour, note: key.note, d: `m 0 0 v 107 a 3 3 0 0 0 3 3 h 27 v -110 z`, x }\r\n\t\t} else if (i === whiteKeyInfo.length - 1) {\r\n\t\t\treturn { hasNeighbour: key.hasNeighbour, note: key.note, d: `m ${x} 0 v 110 h 27 a 3 3 0 0 0 3 -3 v -107 z `, x }\r\n\t\t} else {\r\n\t\t\treturn { hasNeighbour: key.hasNeighbour, note: key.note, d: `m ${x} 0 v 110 h 30 v -110 z`, x }\r\n\t\t}\r\n\t})\r\n}\r\nfunction createBlackKeys(whiteKeys, low, high) {\r\n\treturn whiteKeys.map((key, i) => {\r\n\t\t// const id = (key.note.substr(0, 1) + 's' + key.note.substr(1)).toLowerCase()\r\n\t\tconst note = key.note.substr(0, 1) + '#' + key.note.substr(1)\r\n\t\tconst x = 18 + 30 * i\r\n\t\tif (key.hasNeighbour) {\r\n\t\t\treturn { note, d: `m ${x} 0 v 63 a 2 2 0 0 0 2 2 h 18 a 2 2 0 0 0 2 -2 v -63 z`, x }\r\n\t\t\t// return createKeyPath(id, note, 'black', `m ${x} 0 v 63 a 2 2 0 0 0 2 2 h 18 a 2 2 0 0 0 2 -2 v -63 z`, x)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn null\r\n\t\t}\r\n\t}).filter(el => el !== null)\r\n}\r\nexport default FullPiano\r\n","import { useEffect, useState } from 'react';\r\nexport default function useMouseClicker(sampler, loading) {\r\n    const [clicked, setClicked] = useState(null)\r\n    const [released, setReleased] = useState(null)\r\n    useEffect(() => {\r\n        const handleMouseUp = (e) => {\r\n            const { note } = e.target.dataset\r\n            setReleased(note)\r\n            setClicked(null)\r\n        }\r\n\r\n        const handleMouseMove = (e) => {\r\n            if (clicked !== null && e.target.dataset !== undefined) {\r\n                const { note } = e.target.dataset\r\n                const prevNote = clicked;\r\n                if (note !== prevNote) {\r\n                    setClicked(note)\r\n                    setReleased(prevNote)\r\n                }\r\n            }\r\n        }\r\n        const handleMouseDown = (e) => {\r\n            const { note } = e.target.dataset\r\n            setClicked(note)\r\n            setReleased(null)\r\n        }\r\n\r\n        // Here instead of in path because I mouse sometimes get released not over the clicked note.\r\n        if (!loading) {\r\n            window.addEventListener('mousedown', handleMouseDown);\r\n            window.addEventListener('mousemove', handleMouseMove);\r\n            window.addEventListener('mouseup', handleMouseUp);\r\n        }\r\n        return () => {\r\n            window.removeEventListener('mousedown', handleMouseDown);\r\n            window.removeEventListener('mousemove', handleMouseMove);\r\n            window.removeEventListener('mouseup', handleMouseUp);\r\n        }\r\n    }, [sampler, clicked, loading])\r\n\r\n    // Here the sound gets played\r\n    useEffect(() => {\r\n        if (clicked == null) return\r\n        sampler.triggerAttack(clicked)\r\n    }, [sampler, clicked])\r\n    useEffect(() => {\r\n        if (released == null) return\r\n        sampler.triggerRelease(released)\r\n    }, [sampler, released])\r\n    return clicked\r\n}","export default __webpack_public_path__ + \"static/media/1.g3.8f81a3b9.ogg\";","export default __webpack_public_path__ + \"static/media/3.a3.9c12f360.ogg\";","export default __webpack_public_path__ + \"static/media/6.c4.2377fed6.ogg\";","export default __webpack_public_path__ + \"static/media/9.ds4.fc86c751.ogg\";","export default __webpack_public_path__ + \"static/media/12.fs4.d9071cbe.ogg\";","export default __webpack_public_path__ + \"static/media/15.a4.1f51ad50.ogg\";","export default __webpack_public_path__ + \"static/media/18.c5.350a2ba1.ogg\";","export default __webpack_public_path__ + \"static/media/21.ds5.929d4e7b.ogg\";","export default __webpack_public_path__ + \"static/media/24.fs5.1fc5847e.ogg\";","export default __webpack_public_path__ + \"static/media/27.a5.a37b4bea.ogg\";","export default __webpack_public_path__ + \"static/media/29.c6.72cf6e45.ogg\";","export default __webpack_public_path__ + \"static/media/30.ds6.2a408d1c.ogg\";","export default __webpack_public_path__ + \"static/media/31.fs6.23bd57c5.ogg\";","import { Sampler, Buffer } from 'tone'\r\nimport { g3, a3, c4, ds4, fs4, a4, c5, ds5, fs5, a5, c6, ds6, fs6 } from '../assets/audio'\r\n\r\nconst g3b = new Buffer(g3)\r\nconst a3b = new Buffer(a3)\r\nconst c4b = new Buffer(c4)\r\nconst ds4b = new Buffer(ds4)\r\nconst fs4b = new Buffer(fs4)\r\nconst a4b = new Buffer(a4)\r\nconst c5b = new Buffer(c5)\r\nconst ds5b = new Buffer(ds5)\r\n\r\nconst fs5b = new Buffer(fs5)\r\nconst a5b = new Buffer(a5)\r\nconst c6b = new Buffer(c6)\r\nconst ds6b = new Buffer(ds6)\r\nconst fs6b = new Buffer(fs6)\r\n\r\n\r\nexport default function createSampler(fn) {\r\n    return new Sampler({\r\n        urls: {\r\n            \"G1\": g3b,\r\n            \"A1\": a3b,\r\n            \"C2\": c4b,\r\n            \"D#2\": ds4b,\r\n            \"F#2\": fs4b,\r\n            \"A2\": a4b,\r\n            \"C3\": c5b,\r\n            \"D#3\": ds5b,\r\n            \"F#3\": fs5b,\r\n            \"A3\": a5b,\r\n            \"C4\": c6b,\r\n            \"D#4\": ds6b,\r\n            \"F#4\": fs6b,\r\n        },\r\n        baseUrl: \"../../assets/audio\",\r\n        release: 1,\r\n        onload: () => {\r\n            fn()\r\n        }\r\n    }).toDestination();\r\n}","export default __webpack_public_path__ + \"static/media/32.a6.c28f6973.ogg\";","import React from 'react'\r\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\r\nimport FullPiano from './FullPiano'\r\nimport createSampler from '../../helper/createSampler'\r\nimport { Button } from '../../sharedStyles'\r\n\r\nconst FullscreenPiano = ({ options, setLoading, ...restProps }) => {\r\n  const handle = useFullScreenHandle();\r\n  const sampler = createSampler(() => setLoading(false));\r\n\r\n  const handleClick = () => {\r\n    handle.enter()\r\n  }\r\n\r\n  return (\r\n    <div {...restProps}>\r\n      <FullScreen handle={handle}>\r\n        <FullPiano sampler={sampler} options={{ ...options, isFullscreen: handle.active }} />\r\n      </FullScreen>\r\n      <Button onClick={handleClick}>\r\n        Enter fullscreen\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FullscreenPiano"],"sourceRoot":""}